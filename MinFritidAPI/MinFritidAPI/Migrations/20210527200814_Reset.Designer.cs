// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinFritidAPI.Data;

namespace MinFritidAPI.Migrations
{
    [DbContext(typeof(MinFritidContext))]
    [Migration("20210527200814_Reset")]
    partial class Reset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Bruger",
                            NormalizedName = "BRUGER"
                        });
                });

            modelBuilder.Entity("MinFritidAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("AdminID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("MinFritidAPI.Models.Aktivitet", b =>
                {
                    b.Property<int>("AktivitetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktiv");

                    b.Property<int?>("AktivitetPostnummer");

                    b.Property<string>("Beskrivelse");

                    b.Property<string>("Huskeliste");

                    b.Property<int>("MaxDeltagere");

                    b.Property<int>("Pris");

                    b.Property<DateTime>("SlutTidspunkt");

                    b.Property<DateTime>("StartTidspunkt");

                    b.Property<string>("Titel");

                    b.HasKey("AktivitetID");

                    b.HasIndex("AktivitetPostnummer");

                    b.ToTable("Aktivitet");
                });

            modelBuilder.Entity("MinFritidAPI.Models.AktivitetBrugerTilmeldt", b =>
                {
                    b.Property<int>("AktivitetID");

                    b.Property<int>("BrugerID");

                    b.Property<string>("Prioritet");

                    b.HasKey("AktivitetID", "BrugerID");

                    b.HasAlternateKey("AktivitetID");

                    b.HasIndex("BrugerID");

                    b.ToTable("AktivitetBrugerTilmeldt");
                });

            modelBuilder.Entity("MinFritidAPI.Models.Bruger", b =>
                {
                    b.Property<int>("BrugerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Aktiv");

                    b.Property<int?>("BrugerPostnummer");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Efternavn")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("Foedselsdato")
                        .HasColumnType("Date");

                    b.Property<string>("Fornavn")
                        .IsRequired();

                    b.Property<string>("Id");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<bool>("Verificeret");

                    b.HasKey("BrugerID");

                    b.HasIndex("BrugerPostnummer");

                    b.ToTable("Bruger");
                });

            modelBuilder.Entity("MinFritidAPI.Models.By", b =>
                {
                    b.Property<int>("Postnummer");

                    b.Property<string>("Bynavn");

                    b.HasKey("Postnummer");

                    b.ToTable("By");
                });

            modelBuilder.Entity("MinFritidAPI.Models.Aktivitet", b =>
                {
                    b.HasOne("MinFritidAPI.Models.By", "By")
                        .WithMany()
                        .HasForeignKey("AktivitetPostnummer");
                });

            modelBuilder.Entity("MinFritidAPI.Models.AktivitetBrugerTilmeldt", b =>
                {
                    b.HasOne("MinFritidAPI.Models.Aktivitet", "Aktivitet")
                        .WithMany("AktivitetBrugerTilmeldt")
                        .HasForeignKey("AktivitetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MinFritidAPI.Models.Bruger", "Bruger")
                        .WithMany("AktivitetBrugerTilmeldt")
                        .HasForeignKey("BrugerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MinFritidAPI.Models.Bruger", b =>
                {
                    b.HasOne("MinFritidAPI.Models.By", "By")
                        .WithMany()
                        .HasForeignKey("BrugerPostnummer");
                });
#pragma warning restore 612, 618
        }
    }
}
